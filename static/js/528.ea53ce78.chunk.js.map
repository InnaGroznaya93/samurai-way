{"version":3,"file":"static/js/528.ea53ce78.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileInfo_img__-JxMq\",\"item\":\"ProfileInfo_item__W2ULH\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__FuPwT\"};","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { ProfileInfoPropsType } from \"./ProfileInfo\";\r\n\r\nconst ProfileStatusWithHooks = (props: Partial<ProfileInfoPropsType>) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatusTC(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {status || props.status || \"----\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            value={status as string}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import classes from \"./ProfileInfo.module.css\";\r\nimport { ProfileType } from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n  profile: ProfileType;\r\n  status: null | string;\r\n  updateStatusTC: any;\r\n};\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n  const { profile, status, updateStatusTC } = props;\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n  console.log(props.status);\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <img src={profile.photos.large} />\r\n        <ProfileStatusWithHooks\r\n          status={status}\r\n          updateStatusTC={updateStatusTC}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__d2dc2\",\"posts\":\"MyPosts_posts__5Qse7\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__2p4N0\"};","import React from 'react';\r\nimport classes from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n            <div className={classes.item}>\r\n                <img\r\n                    src={'https://avatars.mds.yandex.net/i?id=a4e67ec8966163d185ea5a5b908a9fc8_l-5236752-images-thumbs&n=13'}/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like {props.likesCount}</span>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {useRef} from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostDataType} from \"../../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: PostDataType[]\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n        let postsElements = props.postsData.map(p => <Post message={p.message} likesCount={p.likesCount}/>)\r\n        let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <AddNewPostForm addPost={props.addPost}/>\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        );\r\n    })\r\nconst AddNewPostForm = (props: { addPost: (newPost: string) => void }) => {\r\n\r\n    type FormikErrorsType = {\r\n        newPost?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorsType = {}\r\n            if(!values.newPost) {\r\n                errors.newPost = `enter your post text`\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            props.addPost(values.newPost)\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (<div>\r\n        <form action={''} onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <textarea {...formik.getFieldProps('newPost')}/>\r\n                {formik.touched.newPost && formik.errors.newPost && <div style={{color: 'red', margin: '5px'}}>{formik.errors.newPost}</div>}\r\n            </div>\r\n            <div>\r\n                <button type={'submit'} disabled={!!formik.errors.newPost}>Add new post</button>\r\n            </div>\r\n        </form>\r\n        <div>\r\n            <button>Remove post</button>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostActionCreator(newPost))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: null | string\r\n    updateStatusTC: any\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {FC} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, updateStatusTC} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\"\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: any\r\n    getStatusTC: any\r\n    updateStatusTC: any\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: null | string\r\n    id: number | null\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n           // userId = \"27903\"\r\n            userId = \"\" + this.props.id\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile} status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.auth.data.id\r\n    }\r\n}\r\n\r\nexport default compose<FC>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)","import React, {ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {AppStateType, ReduxStoreType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component: FC<T>) {\r\n    function RedirectComponent(props: MapStateToPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T & {}}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps) (RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n};\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusTC","profile","console","log","className","classes","src","photos","large","Preloader","message","likesCount","MyPosts","React","postsElements","postsData","map","p","useRef","AddNewPostForm","addPost","formik","useFormik","initialValues","newPost","validate","values","errors","onSubmit","resetForm","action","handleSubmit","getFieldProps","touched","style","color","margin","type","disabled","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","id","history","push","getUserProfileTC","getStatusTC","compose","auth","data","withRouter","WithAuthRedirect","mapStateToProps","isAuth","Component","restProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","to"],"sourceRoot":""}