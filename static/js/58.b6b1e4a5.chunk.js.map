{"version":3,"file":"static/js/58.b6b1e4a5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ProfileInfo_item__W2ULH\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__FuPwT\",\"mainBlock\":\"ProfileInfo_mainBlock__bJasl\",\"mainPhoto\":\"ProfileInfo_mainPhoto__-3sBu\",\"btn\":\"ProfileInfo_btn__k0VGu\",\"dataBlock\":\"ProfileInfo_dataBlock__hyDE0\",\"infoBlock\":\"ProfileInfo_infoBlock__Xo9y6\",\"contact\":\"ProfileInfo_contact__tdDAa\"};","import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { ProfileInfoPropsType } from \"./ProfileInfo\";\r\n\r\nconst ProfileStatusWithHooks = (props: Partial<ProfileInfoPropsType>) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    if(props.isOwner) {\r\n      setEditMode(true);\r\n    }\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatusTC(status);\r\n    setStatus(props.status)\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status: </b>\r\n        \r\n          <span onDoubleClick={activateEditMode}>\r\n            {status || props.status || \"----\"}\r\n          </span>\r\n         \r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            onChange={onStatusChange}\r\n            autoFocus\r\n            onBlur={deactivateEditMode}\r\n            value={status as string}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import classes from \"./ProfileInfo.module.css\";\r\nimport { FormikHelpers, useFormik } from \"formik\";\r\nimport { ContactsType, ProfileType } from \"../../../redux/profile-reducer\";\r\nimport { useState } from \"react\";\r\n\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n  onSubmit: (formData: any) => Promise<void | string>;\r\n};\r\nexport type ProfileInfoDataType = {\r\n  fullName: string;\r\n  lookingForAJob: boolean;\r\n  lookingForAJobDescription: string;\r\n  aboutMe: string;\r\n  contacts: ContactsType;\r\n};\r\n\r\nexport const ProfileDataForm = (props: PropsType) => {\r\n  const { profile, onSubmit } = props;\r\n  let [error, setError] = useState(\"\");\r\n  let [errorFieldName, setErrorFieldName] = useState(\"\");\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      fullName: profile.fullName ?? \"\",\r\n      lookingForAJob: profile.lookingForAJob ?? \"\",\r\n      lookingForAJobDescription: profile.lookingForAJobDescription ?? \"\",\r\n      aboutMe: profile.aboutMe ?? \"\",\r\n      contacts: profile.contacts ?? \"\",\r\n    } as ProfileInfoDataType,\r\n\r\n    onSubmit: (values, formikHelpers: FormikHelpers<ProfileInfoDataType>) => {\r\n      debugger\r\n      let fieldName: string\r\n      onSubmit(values).then((res) => {\r\n        //@ts-ignore\r\n        setError(res);\r\n        if (res) {\r\n          fieldName = res\r\n            .split(\"Invalid url format (Contacts->\")[1]\r\n            .slice(0, -1)\r\n            .toLowerCase();\r\n\r\n          setErrorFieldName(fieldName);\r\n\r\n          formikHelpers.setFieldError(errorFieldName, res + \"\");\r\n        }\r\n      }).catch((error) => {\r\n        formikHelpers.setFieldError(fieldName, error);\r\n      })\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div>\r\n        <button className={classes.btn} type={\"submit\"}>Save</button>\r\n      </div>\r\n      <div className={classes.infoBlock}>\r\n        <b>Full name:</b>\r\n        <div>\r\n        <input\r\n          placeholder={\"Full name\"}\r\n          {...formik.getFieldProps(\"fullName\")}\r\n        />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>\r\n        <input type={\"checkbox\"} {...formik.getFieldProps(\"lookingForAJob\")} />\r\n      </div>\r\n      <div>\r\n        <b>My professional skills:</b>\r\n        <textarea\r\n          placeholder={\"lookingForAJobDescription\"}\r\n          {...formik.getFieldProps(\"lookingForAJobDescription\")}\r\n        />\r\n      </div>\r\n      <div>\r\n        <b>About me:</b>\r\n        <div>\r\n        <textarea\r\n          placeholder={\"About me\"}\r\n          {...formik.getFieldProps(\"aboutMe\")}\r\n        />\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          const { value, ...rest } = formik.getFieldProps(\"contacts.\" + key);\r\n          // console.log(errorFieldName === key);\r\n          // console.log(\"key: \", key);\r\n          // console.log(\"errorFieldName: \", errorFieldName);\r\n          return (\r\n            <div key={key} className={classes.contact}>\r\n              <b>\r\n                {key}: <div>\r\n                <input placeholder={key} value={value ?? \"\"} {...rest} />\r\n                </div>\r\n              </b>\r\n              {errorFieldName === key && (\r\n                <div\r\n                  style={{ margin: \"10px\", color: \"red\", fontWeight: \"bold\" }}\r\n                >\r\n                  {error}\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n","import classes from \"./ProfileInfo.module.css\";\r\nimport { ProfileType } from \"../../../redux/profile-reducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport { ChangeEvent, useState } from \"react\";\r\nimport { ProfileDataForm, ProfileInfoDataType } from \"./ProfileDataForm\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n  profile: ProfileType;\r\n  status: null | string;\r\n  updateStatusTC: any;\r\n  isOwner: boolean;\r\n  savePhoto: any;\r\n  saveProfile: (formData: ProfileInfoDataType) => Promise<string>;\r\n};\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n  const { profile, status, updateStatusTC, isOwner, savePhoto, saveProfile } =\r\n    props;\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [wantToChangePhoto, setWantToChangePhoto] = useState(false)\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0]);\r\n      setWantToChangePhoto(false)\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (formData: ProfileInfoDataType) => {\r\n    const res = await saveProfile(formData);\r\n    if(res) {\r\n      return res;\r\n    }\r\n    setEditMode(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.descriptionBlock}>\r\n        <div className={classes.mainBlock}>\r\n        <img\r\n          src={profile.photos.large || userPhoto}\r\n          className={classes.mainPhoto}\r\n        />\r\n        {isOwner && (\r\n          <div>\r\n             <button className={classes.btn} onClick={() => setWantToChangePhoto(!wantToChangePhoto)}>change photo</button> \r\n          </div>\r\n          \r\n        )}\r\n        {wantToChangePhoto ? (\r\n          <div>\r\n            <input type={\"file\"} onChange={(e) => onMainPhotoSelected(e)} />\r\n          </div>\r\n        )\r\n        : <div style={{height: \"32px\"}}></div>}\r\n        <ProfileStatusWithHooks\r\n          status={status}\r\n          updateStatusTC={updateStatusTC}\r\n          isOwner={isOwner}\r\n        />\r\n        </div>\r\n        \r\n        <div className={classes.dataBlock}>\r\n        {editMode ? (\r\n          <ProfileDataForm profile={profile} onSubmit={onSubmit} />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}</div>    \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: any;\r\n};\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n  const { profile, isOwner, goToEditMode } = props;\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button className={classes.btn} onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n      <div className={classes.infoBlock}>\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{\" \"}\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n                // @ts-ignore\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string;\r\n  contactValue: string;\r\n};\r\nconst Contact = (props: ContactPropsType) => {\r\n  const { contactTitle, contactValue } = props;\r\n  return (\r\n    <div className={classes.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__d2dc2\",\"addPostField\":\"MyPosts_addPostField__EQBcs\",\"textarea\":\"MyPosts_textarea__fTFTH\",\"posts\":\"MyPosts_posts__5Qse7\",\"btn\":\"MyPosts_btn__zqEEY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__2p4N0\",\"postText\":\"Post_postText__F8Pe9\",\"like\":\"Post_like__4jYz0\"};","import React from \"react\";\r\nimport classes from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\nconst Post = (props: PostPropsType) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <div>\r\n        <img\r\n          src={\r\n            \"https://avatars.mds.yandex.net/i?id=a4e67ec8966163d185ea5a5b908a9fc8_l-5236752-images-thumbs&n=13\"\r\n          }\r\n        />\r\n      </div>\r\n      <div>\r\n          <span className={classes.postText}>\r\n          {props.message}\r\n          </span>\r\n        \r\n        <div>\r\n          <span className={classes.like}>like {'\\u2665'} {props.likesCount}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, {KeyboardEvent, useRef} from 'react';\r\nimport classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport {PostDataType} from \"../../../redux/store\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype MyPostsPropsType = {\r\n    postsData: PostDataType[]\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n\r\n        let postsElements = props.postsData.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n        let newPostElement = useRef<HTMLTextAreaElement>(null)\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <AddNewPostForm addPost={props.addPost}/>\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        );\r\n    })\r\n\r\n\r\nconst AddNewPostForm = (props: { addPost: (newPost: string) => void }) => {\r\n\r\n    const onEnterAddPost = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if(e.code === 'Enter') {\r\n            formik.handleSubmit()\r\n        }\r\n    }\r\n\r\n    type FormikErrorsType = {\r\n        newPost?: string\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorsType = {}\r\n            if(!values.newPost) {\r\n                errors.newPost = `enter your post text`\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            props.addPost(values.newPost)\r\n            formik.resetForm()\r\n        }\r\n    })\r\n    return (<div>\r\n        <form action={''} onSubmit={formik.handleSubmit} className={classes.addPostField}>\r\n            <div>\r\n                <textarea {...formik.getFieldProps('newPost')} className={classes.textarea} onKeyDown={onEnterAddPost}/>\r\n                {formik.touched.newPost && formik.errors.newPost && <div style={{color: 'red', margin: '5px'}}>{formik.errors.newPost}</div>}\r\n            </div>\r\n            <div>\r\n                <button className={classes.btn} type={'submit'} disabled={!!formik.errors.newPost}>Add new post</button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ActionTypes} from \"../../../redux/store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostActionCreator(newPost))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport { ProfileInfoDataType } from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: null | string\r\n    updateStatusTC: any\r\n    isOwner: boolean \r\n    savePhoto: any\r\n    saveProfile: (formData: ProfileInfoDataType) => Promise<string>\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC} isOwner={props.isOwner}\r\n            savePhoto={props.savePhoto} saveProfile={props.saveProfile}/>\r\n            {props.isOwner && <MyPostsContainer />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {FC} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, getUserProfileTC, ProfileType, savePhoto, updateStatusTC, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\"\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { ProfileInfoDataType } from './ProfileInfo/ProfileDataForm';\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: any\r\n    getStatusTC: any\r\n    updateStatusTC: any\r\n    savePhoto: any\r\n    saveProfile: (formData: ProfileInfoDataType) => Promise<string>\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: null | string\r\n    id: number | null\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = \"\" + this.props.id\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile} status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC} \r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto} saveProfile={this.props.saveProfile}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        id: state.auth.data.id\r\n    }\r\n}\r\n\r\nexport default compose<FC>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC, savePhoto, saveProfile}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","isOwner","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusTC","ProfileDataForm","profile","onSubmit","error","setError","errorFieldName","setErrorFieldName","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","values","formikHelpers","fieldName","then","res","split","slice","toLowerCase","setFieldError","catch","handleSubmit","className","classes","type","placeholder","getFieldProps","Object","keys","map","key","rest","style","margin","color","fontWeight","ProfileData","goToEditMode","onClick","Contact","contactTitle","contactValue","savePhoto","saveProfile","wantToChangePhoto","setWantToChangePhoto","Preloader","formData","src","photos","large","userPhoto","target","files","length","onMainPhotoSelected","height","message","likesCount","MyPosts","React","postsElements","postsData","p","id","useRef","AddNewPostForm","addPost","newPost","validate","errors","console","log","resetForm","action","onKeyDown","code","touched","disabled","connect","state","profilePage","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","history","push","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","compose","auth","data","withRouter","WithAuthRedirect"],"sourceRoot":""}