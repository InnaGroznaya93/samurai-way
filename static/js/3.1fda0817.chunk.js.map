{"version":3,"file":"static/js/3.1fda0817.chunk.js","mappings":"kLACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,MAAQ,uBAAuB,IAAM,uB,mBCgB9O,EATkD,SAACA,GAC/C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAiB,IAAMA,EAAAA,OAAvC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCGtC,EATgB,SAACN,GAET,OACI,0BACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAAkCJ,EAAMO,a,UC2BlDC,EAAiB,SAACR,GAMpB,IAAMS,GAASC,EAAAA,EAAAA,IACX,CACIC,cAAe,CACXJ,QAAS,IAEbK,SAAU,SAACC,GACP,IAAMC,EAA+B,GAIrC,OAHID,EAAON,UACPO,EAAOP,QAAU,sBAEdO,GAEXC,SAAU,SAAAF,GACNG,QAAQC,IAAIC,KAAKC,UAAUN,IAC3Bb,EAAMoB,YAAYP,EAAON,SACzBE,EAAOY,eAInB,OACI,kBAAMN,SAAUN,EAAOa,aAAvB,WACI,4BACI,kCAAOC,KAAM,OAAQC,YAAa,sBAA0Bf,EAAOgB,cAAc,YAAjF,IAA6FtB,UAAWC,EAAAA,SACvGK,EAAOiB,QAAQnB,SAAWE,EAAOK,OAAOP,SAAU,gBAAKoB,MAAO,CAACC,MAAO,MAAOC,OAAQ,OAAnC,SAA4CpB,EAAOK,OAAOP,WAC3G,gBAAKoB,MAAO,CAACG,OAAQ,cAE3B,0BACI,mBAAQ3B,UAAWC,EAAAA,IAAamB,KAAM,SAAtC,wBAMhB,EA9D4C,SAACvB,GAGzC,IAAI+B,EAAkB/B,EAAMgC,YAAYC,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYjC,GAAIiC,EAAEjC,GAAII,KAAM6B,EAAEC,UAAeD,EAAEjC,OAExGmC,EAAWrC,EAAMgC,YAAYM,aAAaJ,KAAI,SAAAK,GAAC,OAAI,SAAC,EAAD,CAAShC,QAASgC,EAAEhC,SAAcgC,EAAErC,OAI3F,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK2B,KAEL,gBAAK5B,UAAWC,EAAAA,SAAhB,UACI,yBAAMiC,OAEV,SAAC7B,GAAD,UAAoBR,Q,mBCwBhC,GAAewC,E,QAAAA,KAAYC,EAAAA,EAAAA,KAbL,SAACC,GACnB,MAAO,CACHV,YAAaU,EAAMV,gBAGF,SAACW,GACtB,MAAO,CACHvB,YAAa,SAACwB,GACVD,GAASE,EAAAA,EAAAA,GAA2BD,SAK0BE,EAAAA,EAA1E,CAA4FC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__U6hkX\",\"dialogsItems\":\"Dialogs_dialogsItems__o0Fa6\",\"active\":\"Dialogs_active__ZDsTW\",\"messages\":\"Dialogs_messages__GB9tN\",\"message\":\"Dialogs_message__ao-i8\",\"input\":\"Dialogs_input__ODqfs\",\"btn\":\"Dialogs_btn__vM1Bv\"};","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n        return (\r\n            <div>\r\n                <div className={classes.message}>{props.message}</div>\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default Message;","import React, {useRef} from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\n//\r\n// type DialogsPropsType = {\r\n//     dialogsPage: MessagesPageType\r\n//     upDateMessagesData: (messageText: string) => void\r\n//     sendMessage: () => void\r\n// }\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map(d => <DialogItem id={d.id} name={d.userName} key={d.id}/>)\r\n\r\n    let messages = props.dialogsPage.messagesData.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    // let textAreaRef = useRef<HTMLTextAreaElement>(null)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messages}</div>\r\n            </div>\r\n            <AddMessageForm {...props}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst AddMessageForm = (props: DialogsPropsType) => {\r\n\r\n    type AddMessageErrorsType = {\r\n        message?: string\r\n    }\r\n\r\n    const formik = useFormik(\r\n        {\r\n            initialValues: {\r\n                message: '',\r\n            },\r\n            validate: (values) => {\r\n                const errors: AddMessageErrorsType = {}\r\n                if(!values.message) {\r\n                    errors.message = 'enter your message'\r\n                }\r\n                return errors\r\n            },\r\n            onSubmit: values => {\r\n                console.log(JSON.stringify(values))\r\n                props.sendMessage(values.message)\r\n                formik.resetForm()\r\n            }\r\n        })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <div>\r\n                <input type={'text'} placeholder={'Enter your message'} {...formik.getFieldProps('message')} className={classes.input}/>\r\n                {formik.touched.message && formik.errors.message ? <div style={{color: 'red', margin: '3px'}}>{formik.errors.message}</div>\r\n                : <div style={{height: \"38px\"}}></div>}\r\n            </div>\r\n            <div>\r\n                <button className={classes.btn} type={'submit'}>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, {FC} from 'react';\r\nimport {ActionTypes} from \"../../redux/store\";\r\nimport {addNewMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType, ReduxStoreType} from \"../../redux/redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype DialogsContainerPropsType = {\r\n    dispatch: (action: ActionTypes) => void\r\n    store: ReduxStoreType\r\n\r\n}\r\n// const  DialogsContainer = () => {\r\n//\r\n//     return <StoreContext.Consumer>\r\n//         {\r\n//         (store) => {\r\n//\r\n//             let state = store.getState().dialogsPage\r\n//             const sendMessage = () => {\r\n//                 store.dispatch(addNewMessageActionCreator())\r\n//             }\r\n//\r\n//             const onMessageChange = (messageText: string) => {\r\n//                 store.dispatch(UpDateMessagesDataActionCreator(messageText))\r\n//             }\r\n//\r\n//\r\n//             return <Dialogs dialogsPage={state} upDateMessagesData={onMessageChange} sendMessage={sendMessage}/>\r\n//         }\r\n//     }\r\n//     </StoreContext.Consumer>\r\n// };\r\n\r\n\r\n\r\nexport type DialogsPropsType = MapDispatchToPropsType & MapStateToPropsType\r\ntype MapDispatchToPropsType = ReturnType<typeof mapDispatchToProps>\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: ActionTypes) => void) => {\r\n    return {\r\n        sendMessage: (newMessage: string) => {\r\n            dispatch(addNewMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<FC>(connect(mapStateToProps, mapDispatchToProps ), WithAuthRedirect)(Dialogs);"],"names":["props","path","id","className","classes","to","name","message","AddMessageForm","formik","useFormik","initialValues","validate","values","errors","onSubmit","console","log","JSON","stringify","sendMessage","resetForm","handleSubmit","type","placeholder","getFieldProps","touched","style","color","margin","height","dialogsElements","dialogsPage","dialogsData","map","d","userName","messages","messagesData","m","compose","connect","state","dispatch","newMessage","addNewMessageActionCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}